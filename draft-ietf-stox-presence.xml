<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc sortrefs="no"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<rfc category='std' docName='draft-ietf-stox-presence-09' ipr='trust200902'>

  <front>
    <title abbrev="SIP-XMPP Interworking: Presence">Interworking between the Session Initiation Protocol (SIP) and the Extensible Messaging and Presence Protocol (XMPP): Presence</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization>&amp;yet</organization>
      <address>
        <postal>
          <street>P.O. Box 787</street>
          <city>Parker</city>
          <region>CO</region>
          <code>80134</code>
          <country>USA</country>
        </postal>
        <email>ietf@stpeter.im</email>
      </address>
    </author>
    <author initials="A." surname="Houri" fullname="Avshalom Houri">
      <organization>IBM</organization>
      <address>
        <postal>
          <street>Rorberg Building, Pekris 3</street>
          <city>Rehovot</city>
          <code>76123</code>
          <country>Israel</country>
        </postal>
        <email>avshalom@il.ibm.com</email>
      </address>
    </author>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1899 Wynkoop Street, Suite 600</street>
          <city>Denver</city>
          <region>CO</region>
          <code>80202</code>
          <country>USA</country>
        </postal>
        <email>jhildebr@cisco.com</email>
      </address>
    </author>
    <date/>
    <area>RAI</area>
    <keyword>XMPP</keyword>
    <keyword>Jabber</keyword>
    <keyword>SIP</keyword>
    <keyword>SIMPLE</keyword>
    <keyword>IM</keyword>
    <keyword>Instant Messaging</keyword>
    <keyword>Presence</keyword>
    <abstract>
      <t>This document defines a bi-directional protocol mapping for the exchange of presence information between the Session Initiation Protocol (SIP) and the Extensible Messaging and Presence Protocol (XMPP).</t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction" anchor="intro">
      <t>In order to help ensure interworking between presence systems that conform to the instant message / presence requirements <xref target="RFC2779"/>, it is important to clearly define protocol mappings between such systems.  Within the IETF, work has proceeded on two presence technologies:</t>
      <t>
        <list style='symbols'>
          <t>Various extensions to the Session Initiation Protocol (<xref target="RFC3261"/>) for presence, in particular <xref target='RFC3856'/><vspace blankLines='1'/></t>
          <t>The Extensible Messaging and Presence Protocol (XMPP), which consists of a formalization of the core XML streaming protocols developed originally by the Jabber open-source community; the relevant specifications are <xref target='RFC6120'/> for the XML streaming layer and <xref target='RFC6121'/> for basic presence and instant messaging extensions</t>
        </list>
      </t>
      <t>One approach to helping ensure interworking between these protocols is to map each protocol to the abstract semantics described in <xref target="RFC3860"/>; although that is the approach taken by both <xref target="RFC3922"/> and <xref target="I-D.ietf-simple-cpim-mapping"/>, to the best of our knowledge that approach has never been implemented.  The approach taken in this document is to directly map semantics from one protocol to another (i.e., from SIP/SIMPLE to XMPP and vice-versa), since that is how existing systems solve the interworking problem.</t>
      <t>The architectural assumptions underlying such direct mappings are provided in <xref target='I-D.ietf-stox-core'/>, including mapping of addresses and error conditions.  The mappings specified in this document cover basic presence functionality.  Mapping of more advanced functionality (e.g., so-called "rich presence") is out of scope for this document.</t>
    </section>

    <section title="Intended Audience" anchor="audience">
      <t>The documents in this series are intended for use by software developers who have an existing system based on one of these technologies (e.g., SIP), and would like to enable communication from that existing system to systems based on the other technology (e.g., XMPP).  We assume that readers are familiar with the core specifications for both SIP <xref target='RFC3261'/> and XMPP <xref target='RFC6120'/>, with the base document for this series <xref target='I-D.ietf-stox-core'/>, and with the following presence-related specifications:</t>
      <t>
        <list style='symbols'>
          <t>A Presence Event Package for the Session Initiation Protocol <xref target='RFC3856'/></t>
          <t>Presence Information Data Format (PIDF) <xref target='RFC3863'/></t>
          <t>Extensible Messaging and Presence Protocol: Instant Messaging and Presence <xref target='RFC6121'/></t>
          <t>SIP-Specific Event Notification <xref target='RFC6665'/></t>
        </list>
      </t>
    </section>

    <section title="Terminology" anchor="terms">
      <t>A number of terms used here (user, contact, subscription, notification, etc.) are explained in <xref target='RFC3261'/>, <xref target='RFC3856'/>, <xref target='RFC6120'/>, and <xref target='RFC6121'/>.  This document uses some, but not all, of the terms defined in the Model for Presence and Instant Messaging <xref target='RFC2778'/>.</t>
      <t>In flow diagrams, SIP traffic is shown using arrows such as "***&gt;" whereas XMPP traffic is shown using arrows such as "...&gt;".</t>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target='RFC2119'/>.</t>
    </section>

    <section title="Subscriptions to Presence Information" anchor="sub">
      <section title="Overview" anchor="sub-over">
        <t>Both XMPP and presence-aware SIP systems enable entities (often but not necessarily human users) to subscribe to the presence of other entities.  XMPP presence subscriptions are specified in <xref target="RFC6121"/>.  Presence subscriptions using a SIP event package for presence are specified in <xref target="RFC3856"/>.</t>
        <t>As described in <xref target="RFC6121"/>, XMPP presence subscriptions are managed using XMPP presence stanzas of type "subscribe", "subscribed", "unsubscribe", and "unsubscribed".  The main subscription states are:</t>
        <t>
          <list style='symbols'>
            <t>"none" (neither the user nor the contact is subscribed to the other's presence information)</t>
            <t>"from" (the user has a subscription from the contact)</t>
            <t>"to" (the user has a subscription to the contact's presence information)</t>
            <t>"both" (both user and contact are subscribed to each other's presence information)</t>
          </list>
        </t>
        <t>As described in <xref target="RFC3856"/>, SIP presence subscriptions are managed through the use of SIP SUBSCRIBE events sent from a SIP user agent to an intended recipient who is most generally referenced by a Presence URI of the form &lt;pres:user@domain&gt; but who might be referenced by a SIP or SIPS URI of the form &lt;sip:user@domain&gt; or &lt;sips:user@domain&gt;.  In practice, 'pres' URIs are rarely used, which is the examples in this document use 'sip' URIs.</t>
        <t>The subscription models underlying XMPP and SIP differ mainly in the fact that XMPP presence subscriptions are long-lived (indeed permanent if not explicitly cancelled, so that a subscription need never be refreshed during any given presence "session"), whereas SIP presence subscriptions are short-lived (the default time-to-live of a SIP presence subscription is 3600 seconds, as specified in Section 6.4 of <xref target="RFC3856"/>, so that a subscription needs to be explicitly refreshed if it will have the appearance of being permanent or even of lasting as for the duration of a presence "session").  This disparity has implications for the handling of subscription cancellations in either direction and, from the SIP side, subscription refreshes.</t>
      </section>
      <section title="XMPP to SIP" anchor="sub-xmpp">
        <section title="Establishing a Presence Subscription" anchor="sub-xmpp-establish">
          <t>The following diagram illustrates the protocol flow for establishing a presence subscription from an XMPP user to a SIP user, as further explained in the text and examples after the diagram.</t>
          <figure>
            <artwork><![CDATA[
XMPP       XMPP      XMPP-to-SIP    SIP-to-XMPP     SIP          SIP
User      Server      Gateway        Gateway       Server        User
 |           |            |              |            |           |
 | (F1) XMPP |            |              |            |           |
 | subscribe |            |              |            |           |
 |..........>|            |              |            |           |
 |           | (F2) XMPP  |              |            |           |
 |           | subscribe  |              |            |           |
 |           |...........>|              |            |           |
 |           |            | (F3) SIP SUBSCRIBE        |           |
 |           |            | SUBSCRIBE    |            |           |
 |           |            |**************************>|           |
 |           |            |              |            | (F4) SIP  |
 |           |            |              |            | SUBSCRIBE |
 |           |            |              |            |**********>|
 |           |            |              |            | (F5) SIP  |
 |           |            |              |            | 200 OK    |
 |           |            |              | (F6) SIP   |<**********|
 |           |            |              | 200 OK     | (F7) SIP  |
 |           |            |              |<***********| NOTIFY    |
 |           |            |              |            |<**********|
 |           |            |              | (F8) SIP   |           |
 |           |            |              | NOTIFY     |           |
 |           |            |              |<***********|           |
 |           |            |              | (F9) SIP   |           |
 |           |            |              | 200 OK     |           |
 |           |            |              |***********>|           |
 |           |            |              |            | (F10) SIP |
 |           |    (F11) XMPP subscribed  |            | 200 OK    |
 |           |<..........................|            |**********>|
 |           |    (F12) XMPP presence    |            |           |
 |           |<..........................|            |           |
 | (F13) XMPP|            |              |            |           |
 | subscribed|            |              |            |           |
 |<..........|            |              |            |           |
 | (F14) XMPP|            |              |            |           |
 | presence  |            |              |            |           |
 |<..........|            |              |            |           |
 |           |            |              |            |           |
            ]]></artwork>
          </figure>
            <t>An XMPP user (e.g., juliet@example.com) initiates a subscription by sending a subscription request to a contact (e.g., romeo@example.net), and the contact either accepts or declines the request.  If the contact accepts the request, the user will have a subscription to the contact's presence information until (1) the user unsubscribes or (2) the contact cancels the subscription.  The subscription request is encapsulated in a presence stanza of type "subscribe":</t>
          <figure>
            <preamble>Example 1: XMPP user subscribes to SIP contact (F1)</preamble>
            <artwork><![CDATA[
|  <presence from='juliet@example.com'
|            to='romeo@example.net'
|            type='subscribe'/>
            ]]></artwork>
          </figure>
          <t>Upon receiving such a presence stanza, the XMPP server to which Juliet has connected needs to determine the identity of the domainpart in the 'to' address, which it does by following the procedures explained in Section 5 of <xref target='I-D.ietf-stox-core'/>.  If the domain is a SIP domain, the XMPP server will hand off the presence stanza to an associated XMPP-SIP gateway or connection manager that natively communicates with presence-aware SIP servers.</t>
          <t>The XMPP-SIP gateway is then responsible for translating the XMPP subscription request into a SIP SUBSCRIBE request addressed from the XMPP user to the SIP user:</t>
          <figure>
            <preamble>Example 2: SIP transformation of XMPP subscription request (F3)</preamble>
            <artwork><![CDATA[
|  SUBSCRIBE sip:romeo@example.net SIP/2.0
|  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=ffd2
|  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 123 SUBSCRIBE
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Accept: application/pidf+xml
|  Expires: 3600
|  Content-Length: 0
            ]]></artwork>
          </figure>
          <t>Once the SIP-XMPP gateway has passed the SIP SUBSCRIBE off to the SIP server and the SIP server has delivered the SIP SUBSCRIBE to the SIP user (F4 and F5, no examples shown), the SIP user then would send a response indicating acceptance of the subscription request:</t>
          <figure>
            <preamble>Example 3: SIP user accepts subscription request (F5)</preamble>
            <artwork><![CDATA[
|  SIP/2.0 200 OK
|  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=ffd2
|  To: <sip:juliet@example.com>;tag=j89d
|  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C
|  CSeq: 234 SUBSCRIBE
|  Contact: <sip:simple.example.net;transport=tcp>
|  Expires: 3600
|  Content-Length: 0
            ]]></artwork>
          </figure>
          <t>In accordance with <xref target='RFC6665'/>, the XMPP-SIP gateway SHOULD consider the subscription state to be "neutral" until it receives a NOTIFY message.  Therefore the SIP user or SIP-XMPP gateway at the SIP user's domain SHOULD immediately send a NOTIFY message containing a "Subscription-State" header whose value contains the string "active" (see <xref target="pres"/>).</t>
          <figure>
            <preamble>Example 4: SIP user sends presence notification (F7)</preamble>
            <artwork><![CDATA[
|  NOTIFY sip:192.0.2.1 SIP/2.0
|  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=yt66
|  To: <sip:juliet@example.com>;tag=bi54
|  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C
|  Event: presence
|  Subscription-State: active;expires=499
|  Max-Forwards: 70
|  CSeq: 8775 NOTIFY
|  Contact: <sip:simple.example.net;transport=tcp>
|  Content-Type: application/pidf+xml
|  Content-Length: 193
|
|  <?xml version='1.0' encoding='UTF-8'?>
|  <presence xmlns='urn:ietf:params:xml:ns:pidf'
|            entity='pres:romeo@example.net'>
|    <tuple id='ID-orchard'>
|      <status>
|        <basic>open</basic>
|        <show xmlns='jabber:client'>away</show>
|      </status>
|    </tuple>
|  </presence>
            ]]></artwork>
          </figure>
          <t>In response, the presence-aware SIP-XMPP gateway would send a 200 OK to the SIP user (not shown here since it is not translated into an XMPP stanza).</t>
          <t>Upon receiving the first NOTIFY with a subscription state of active, the XMPP-SIP gateway MUST generate a presence stanza of type "subscribed":</t>
          <figure>
            <preamble>Example 5: XMPP user receives acknowledgement from SIP contact (F13)</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com'
|            type='subscribed'/>
            ]]></artwork>
          </figure>
          <t>As described under <xref target="pres"/>, the gateway MUST also generate a presence notification addressed to the XMPP user:</t>
          <figure>
            <preamble>Example 6: XMPP user receives presence notification from SIP contact (F14)</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net/orchard'
|            to='juliet@example.com'/>
            ]]></artwork>
          </figure>
        </section>
        <section title="Refreshing a Presence Subscription" anchor="sub-xmpp-refresh">
          <t>It is the responsibility of the XMPP-SIP gateway to set the value of the "Expires" header and to periodically renew the subscription on the SIMPLE side of the gateway so that the subscription appears to be permanent to the XMPP user.  For example, the XMPP-SIP gateway SHOULD send a new SUBSCRIBE request to the SIP user whenever the XMPP user initiates a presence session with the XMPP server by sending initial presence to its XMPP server.  The XMPP-SIP gateway also SHOULD send a new SUBSCRIBE request to the SIP user whenever the SIP presence subscription is scheduled to expire during the XMPP user's active presence session.</t>
          <t>The rules regarding SIP SUBSCRIBE requests for the purpose of establishing and refreshing a presence subscription are provided in <xref target='RFC6665'/>.  Those rules also apply to XMPP-SIP gateways.  Furthermore, an XMPP-SIP gateway MUST consider the XMPP subscription to be permanently cancelled (and so inform the XMPP user) if it receives a SIP response of 403, 489, or 603.  By contrast, it is appropriate to consider a SIP response of 423 or 481 to be a transient error, and to maintain the long-lived XMPP presence subscription.  <xref target='RFC6665'/> explains more detailed considerations about the handing of SIP responses in relation to subscription requests and refreshes.</t>
          <t>Finally, see the <xref target='sec'>Security Considerations</xref> of this document for important information and requirements regarding the security implications of subscription refreshes.</t>
        </section>
        <section title="Cancelling a Presence Subscription" anchor="sub-xmpp-cancel">
          <t>The following diagram illustrates the protocol flow for cancelling an XMPP user's presence subscription to a SIP user, as further explained in the text and examples after the diagram.</t>
          <figure>
            <artwork><![CDATA[
XMPP       XMPP      XMPP-to-SIP    SIP-to-XMPP     SIP          SIP
User      Server      Gateway        Gateway       Server        User
 |           |            |              |            |           |
 | (F15) XMPP|            |              |            |           |
 |unsubscribe|            |              |            |           |
 |..........>|            |              |            |           |
 |           | (F16) XMPP |              |            |           |
 |           | unsubscribe|              |            |           |
 |           |...........>|              |            |           |
 |           |            | (F17) SIP SUBSCRIBE       |           |
 |           |            | Expires: 0   |            |           |
 |           |            |**************************>|           |
 |           |            |              |            | (F18) SIP |
 |           |            |              |            | SUBSCRIBE |
 |           |            |              |            | Expires: 0|
 |           |            |              |            |**********>|
 |           |            |              |            | (F19) SIP |
 |           |            |              |            | 200 OK    |
 |           |            |              |            |<**********|
 |           |            |              | (F20) SIP  |           |
 |           |            |              | 200 OK     |           |
 |           |            |              |<***********|           |
 |           |  (F21) XMPP unsubscribed  |            |           |
 |           |<..........................|            |           |
 | (F22) XMPP|            |              |            |           |
 | unsub'd   |            |              |            |           |
 |<..........|            |              |            |           |
 |           |            |              |            |           |
            ]]></artwork>
          </figure>
          <t>At any time after subscribing, the XMPP user can unsubscribe from the contact's presence.  This is done by sending a presence stanza of type "unsubscribe":</t>
          <figure>
            <preamble>Example 7: XMPP user unsubscribes from SIP contact (F15)</preamble>
            <artwork><![CDATA[
|  <presence from='juliet@example.com'
|            to='romeo@example.net'
|            type='unsubscribe'/>
            ]]></artwork>
          </figure>
          <t>The XMPP-SIP gateway is responsible for translating the unsubscribe command into a SIP SUBSCRIBE request with the "Expires" header set to a value of zero:</t>
          <figure>
            <preamble>Example 8: SIP transformation of XMPP unsubscribe (F17)</preamble>
            <artwork><![CDATA[
|  SUBSCRIBE sip:romeo@example.net SIP/2.0
|  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=j89d
|  Call-ID: 9D9F00DF-FCA9-4E7E-B970-80B638D5218A
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 789 SUBSCRIBE
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Accept: application/pidf+xml
|  Expires: 0
|  Content-Length: 0
            ]]></artwork>
          </figure>
          <t>Upon sending the transformed unsubscribe, the XMPP-SIP gateway SHOULD send a presence stanza of type "unsubscribed" addressed to the XMPP user:</t>
          <figure>
            <preamble>Example 9: XMPP user receives unsubscribed notification (F22)</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com'
|            type='unsubscribed'/>
            ]]></artwork>
          </figure>
        </section>
      </section>
      <section title="SIP to XMPP" anchor="sub-sip">
        <section title="Establishing a Presence Subscription" anchor="sub-sip-establish">
          <t>The following diagram illustrates the protocol flow for establishing a presence subscription from a SIP user to an XMPP user, as further explained in the text and examples after the diagram.</t>
          <figure>
            <artwork><![CDATA[
SIP        SIP      SIP-to-XMPP    XMPP-to-SIP      XMPP         XMPP
User      Server      Gateway        Gateway       Server        User
 |           |            |              |            |           |
 | (F23) SIP |            |              |            |           |
 | SUBSCRIBE |            |              |            |           |
 |**********>|            |              |            |           |
 |           | (F24) SIP  |              |            |           |
 |           | SUBSCRIBE  |              |            |           |
 |           |***********>|              |            |           |
 |           |            | (F25) XMPP subscribe      |           |
 |           |            |..........................>|           |
 |           |            |              |            | (F26) XMPP|
 |           |            |              |            | subscribe |
 |           |            |              |            |..........>|
 |           |            |              |            | (F27) XMPP|
 |           |            |              |            | subscribed|
 |           |            |              |            |<..........|
 |           |            |              | (F28) XMPP |           |
 |           |            |              | subscribed |           |
 |           |            |              |<...........|           |
 |           | (F29) SIP 200 OK          |            |           |
 |           |<**************************|            |           |
 | (F30) SIP |            |              |            |           |
 | 200 OK    |            |              |            |           |
 |<**********|            |              |            |           |
 |           |            |              |            |           |

            ]]></artwork>
          </figure>
          <t>A SIP user initiates a subscription to a contact's presence information by sending a SIP SUBSCRIBE request to the contact.  The following is an example of such a request:</t>
          <figure>
            <preamble>Example 10: SIP user subscribes to XMPP contact (F23)</preamble>
            <artwork><![CDATA[
|  SUBSCRIBE sip:juliet@example.com SIP/2.0
|  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=xfg9
|  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 263 SUBSCRIBE
|  Contact: <sip:simple.example.net;transport=tcp>
|  Accept: application/pidf+xml
|  Content-Length: 0
            ]]></artwork>
          </figure>
          <t>Notice that the "Expires" header was not included in the SUBSCRIBE request; this means that the default value of 3600 (i.e., 3600 seconds = 1 hour) applies.</t>
          <t>Upon receiving the SUBSCRIBE, the SIP server needs to determine the identity of the domain portion of the Request-URI or To header, which it does by following the procedures explained in Section 5 of <xref target='I-D.ietf-stox-core'/>.  If the domain is an XMPP domain, the SIP server will hand off the SUBSCRIBE to an associated SIP-XMPP gateway or connection manager that natively communicates with XMPP servers.</t>
          <t>The SIP-XMPP gateway is then responsible for translating the SUBSCRIBE into an XMPP subscription request addressed from the SIP user to the XMPP user:</t>
          <figure>
            <preamble>Example 11: XMPP transformation of SIP SUBSCRIBE (F25)</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com'
|            type='subscribe'/>
            ]]></artwork>
          </figure>
          <t>In accordance with <xref target='RFC6121'/>, once it receives the stanza from the XMPP-SIP gateway, the XMPP user's server MUST deliver the presence subscription request to the XMPP user (or, if a subscription already exists in the XMPP user's roster, the XMPP server SHOULD auto-reply with a presence stanza of type 'subscribed').</t>
          <t>If the XMPP user approves the subscription request, the XMPP server then MUST return a presence stanza of type "subscribed" addressed from the XMPP user to the SIP user.  The XMPP-SIP gateway is responsible for translating the presence stanza of type "subscribed" into a SIP 200 OK response.</t>
          <t>If the XMPP user declines the subscription request, the XMPP server then MUST return a presence stanza of type "unsubscribed" addressed from the XMPP user to the SIP user and the XMPP-SIP gateway MUST transform that stanza into an empty SIP NOTIFY message with a Subscription-State of "terminated" and a reason of "rejected":</t>
          <figure>
            <preamble>Example 12: Subscription request rejected</preamble>
            <artwork><![CDATA[
|  NOTIFY sip:192.0.2.2 SIP/2.0
|  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=ur93
|  To: <sip:romeo@example.net>;tag=pq72
|  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11
|  Event: presence
|  Subscription-State: terminated;reason=rejected
|  Max-Forwards: 70
|  CSeq: 232 NOTIFY
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Content-Type: application/pidf+xml
|  Content-Length: 0
            ]]></artwork>
          </figure>
        </section>
        <section title="Refreshing a Presence Subscription" anchor="sub-sip-refresh">
          <t>For as long as a SIP user is online and interested in receiving presence notifications from the XMPP contact, the user's SIP user agent is responsible for periodically refreshing the subscription by sending an updated SUBSCRIBE request with an appropriate value for the Expires header.  In response, the presence-aware SIP-XMPP gateway MUST send a SIP NOTIFY to the user agent (per <xref target='RFC6665'/>); if the gateway has meaningful information about the availability state of the XMPP user (e.g., obtained from the core presence session in the XMPP server) then the NOTIFY MUST communicate that information (e.g., by including a PIDF body <xref target='RFC3863'/> with the relevant data), whereas if the gateway does not have meaningful information about the availability state of the XMPP user then the NOTIFY MUST be empty as allowed by <xref target='RFC6665'/>.</t>
          <t>Once the SIP user ends its presence session, it is the responsibility of the presence-aware SIP-XMPP gateway to properly handle the difference between short-lived SIP presence subscriptions and long-lived XMPP presence subscriptions.  The gateway has two options when the SIP user's subscription expires:</t>
          <t><list style='symbols'>
            <t>Cancel the subscription (i.e., treat it as temporary) and send an XMPP presence stanza of type "unsubscribe" to the XMPP contact; this honors the SIP semantic but will seem strange to the XMPP contact (since it will appear that the SIP user has cancelled a long-lived subscription).</t>
            <t>Maintain the subscription (i.e., treat it as long-lived) and (1) send a SIP NOTIFY request to the SIP user containing a PIDF document specifying that the XMPP contact now has a basic status of "closed", including a Subscription-State of "terminated" with a reason of "timeout" and (2) send an XMPP presence stanza of type "unavailable" to the XMPP contact; this violates the letter of the SIP semantic but will seem more natural to the XMPP contact.</t>
          </list></t>
          <t>Which of these options a presence-aware SIP-XMPP gateway chooses is up to the implementation.</t>
          <t>If the implementation chooses the first option, the protocol generated would be as follows:</t>
          <figure>
            <preamble>Example 13: XMPP handling of temporary subscription expiry</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com'
|            type='unsubscribe'/>
            ]]></artwork>
          </figure>
          <t>If the implementation chooses the second option, the protocol generated would be as follows:</t>
          <figure>
            <preamble>Example 14: SIP handling of long-lived subscription expiry</preamble>
            <artwork><![CDATA[
|  NOTIFY sip:192.0.2.2 SIP/2.0
|  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=ur93
|  To: <sip:romeo@example.net>;tag=pq72
|  Call-ID: 2B44E147-3B53-45E4-9D48-C051F3216D14
|  Event: presence
|  Subscription-State: terminated;reason=timeout
|  Max-Forwards: 70
|  CSeq: 232 NOTIFY
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Content-Type: application/pidf+xml
|  Content-Length: 194
|
|  <?xml version='1.0' encoding='UTF-8'?>
|  <presence xmlns='urn:ietf:params:xml:ns:pidf'
|            entity='pres:juliet@example.com'>
|    <tuple id='ID-balcony'>
|      <status>
|        <basic>closed</basic>
|      </status>
|    </tuple>
|  </presence>
            ]]></artwork>
          </figure>
          <figure>
            <preamble>Example 15: XMPP handling of long-lived subscription expiry</preamble>
            <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com'
|            type='unavailable'/>
            ]]></artwork>
          </figure>
        </section>
        <section title="Cancelling a Presence Subscription" anchor="sub-sip-cancel">
          <t>At any time, the SIP user can cancel the subscription by sending a SUBSCRIBE message whose "Expires" header is set to a value of zero ("0"):</t>
          <figure>
            <preamble>Example 16: SIP user cancels subscription</preamble>
            <artwork><![CDATA[
|  SUBSCRIBE sip:juliet@example.com SIP/2.0
|  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=yt66
|  Call-ID: 717B1B84-F080-4F12-9F44-0EC1ADE767B9
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 8775 SUBSCRIBE
|  Contact: <sip:simple.example.net;transport=tcp>
|  Expires: 0
|  Content-Length: 0
            ]]></artwork>
          </figure>
          <t>As above, upon receiving such a request, a presence-aware SIP-XMPP gateway is responsible for doing one of the following:</t>
          <t><list style='symbols'>
            <t>Cancel the subscription (i.e., treat it as temporary) and send an XMPP presence stanza of type "unsubscribe" to the XMPP contact.</t>
            <t>Maintain the subscription (i.e., treat it as long-lived) and (1) send a SIP NOTIFY request to the SIP user containing a PIDF document specifying that the XMPP contact now has a basic status of "closed", (2) send a SIP SUBSCRIBE request to the SIP user with an "Expires" header set to a value of "0" (zero) when it receives XMPP presence of type "unavailable" from the XMPP contact, and (3) send an XMPP presence stanza of type "unavailable" to the XMPP contact.</t>
          </list></t>
        </section>
      </section>
    </section>

    <section title="Notifications of Presence Information" anchor="pres">
      <section title="Overview" anchor="pres-over">
        <t>Both XMPP and presence-aware SIP systems enable entities (often but not necessarily human users) to send presence notifications to other entities.  At its most basic, the term "presence" refers to information about an entity's "on/off" availability for communication on a network.  Often, this basic concept is supplemented by information that further specifies the entity's context or status while available for communication; these availability states commonly include "away" and "do not disturb".  Some systems and protocols extend the concepts of presence and availability even further and refer to any relatively ephemeral information about an entity as a kind of presence; categories of such "extended presence" include geographical location (e.g., GPS coordinates), user mood (e.g., grumpy), user activity (e.g., walking), and ambient environment (e.g., noisy).  In this document, we focus on the "least common denominator" of network availability only, although future documents might address broader notions of presence, including availability states and extended presence.</t>
        <t><xref target="RFC6121"/> defines how XMPP presence stanzas can indicate availability (via absence of a 'type' attribute) or lack of availability (via a 'type' attribute with a value of "unavailable").  SIP presence using a SIP event package for presence is specified in <xref target="RFC3856"/>.</t>
        <t>As described in <xref target="RFC6121"/>, XMPP presence information about an entity is communicated by means of an XML &lt;presence/&gt; stanza sent over an XML stream.  In this document we will assume that such a presence stanza is sent from an XMPP client to an XMPP server over an XML stream negotiated between the client and the server, and that the client is controlled by a human user.  In general, XMPP presence is sent by the user to the user's server and then broadcast to all entities who are subscribed to the user's presence information.</t>
        <t>As described in <xref target="RFC3856"/>, presence information about an entity is communicated by means of a SIP NOTIFY event sent from a SIP user agent to an intended recipient who is most generally referenced by an Presence URI of the form &lt;pres:user@domain&gt; but who might be referenced by a SIP or SIPS URI of the form &lt;sip:user@domain&gt; or &lt;sips:user@domain&gt;.</t>
        <t>This document addresses basic presence or network availability only, not the various extensions to SIP and XMPP for "rich presence", such as <xref target='RFC4480'/>, <xref target='XEP-0107'/>, and <xref target='XEP-0108'/>.</t>
      </section>
      <section title="XMPP to SIP" anchor="pres-xmpp">
        <t>When Juliet interacts with her XMPP client to modify her presence information (or when her client automatically updates her presence information, e.g. via an "auto-away" feature), her client generates an XMPP &lt;presence/&gt; stanza.  The syntax of the &lt;presence/&gt; stanza, including required and optional elements and attributes, is defined in <xref target="RFC6121"/>.  The following is an example of such a stanza:</t>
        <figure>
          <preamble>Example 17: XMPP user sends presence notification</preamble>
          <artwork><![CDATA[
|  <presence from='juliet@example.com/balcony'/>
          ]]></artwork>
        </figure>
        <t>Upon receiving such a stanza, the XMPP server to which Juliet has connected broadcasts it to all subscribers who are authorized to receive presence notifications from Juliet (this is similar to the SIP NOTIFY method).  For each subscriber, broadcasting the presence notification involves either delivering it to a local recipient (if the hostname in the subscriber's address matches one of the hostnames serviced by the XMPP server) or attempting to route it to the foreign domain that services the hostname in the subscriber's address.  Thus the XMPP server needs to determine the identity of the domainpart in the 'to' address, which it does by following the procedures discussed in <xref target='I-D.ietf-stox-core'/>.  If the domain is a SIP domain, the XMPP server will hand off the presence stanza to an associated XMPP-SIP gateway or connection manager that natively communicates with presence-aware SIP servers (F2, no example shown).</t>
        <t>The XMPP-SIP gateway is then responsible for translating the XMPP presence stanza into a SIP NOTIFY request and included PIDF document from the XMPP user to the SIP user.</t>
        <figure>
          <preamble>Example 18: SIP transformation of XMPP presence notification</preamble>
          <artwork><![CDATA[
|  NOTIFY sip:192.0.2.2 SIP/2.0
|  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=gh19
|  To: <sip:romeo@example.net>;tag=yt66
|  Contact: <sip:juliet@example.com>;gr=balcony
|  Call-ID: 2B44E147-3B53-45E4-9D48-C051F3216D14
|  Event: presence
|  Subscription-State: active;expires=599
|  Max-Forwards: 70
|  CSeq: 157 NOTIFY
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Content-Type: application/pidf+xml
|  Content-Length: 192
|
|  <?xml version='1.0' encoding='UTF-8'?>
|  <presence xmlns='urn:ietf:params:xml:ns:pidf'
|            entity='pres:juliet@example.com'>
|    <tuple id='ID-balcony'>
|      <status>
|        <basic>open</basic>
|        <show xmlns='jabber:client'>away</show>
|      </status>
|    </tuple>
|  </presence>
          ]]></artwork>
        </figure>
        <t>The mapping of XMPP syntax elements to SIP syntax elements SHOULD be as shown in the following table.  (Mappings for elements not mentioned are undefined.)</t>
        <figure>
          <preamble>Table 1: Presence syntax mapping from XMPP to SIP</preamble>
          <artwork><![CDATA[
   +-----------------------------+---------------------------+
   |  XMPP Element or Attribute  |  SIP Header or PIDF Data  |
   +-----------------------------+---------------------------+
   |  <presence/> stanza         |  "Event: presence" (1)    |
   +-----------------------------+---------------------------+
   |  XMPP resource identifer    |  tuple 'id' attribute (2) |
   +-----------------------------+---------------------------+
   |  from                       |  From                     |
   +-----------------------------+---------------------------+
   |  id                         |  CSeq (3)                 |
   +-----------------------------+---------------------------+
   |  to                         |  To                       |
   +-----------------------------+---------------------------+
   |  type                       |  basic status (4) (5)     |
   +-----------------------------+---------------------------+
   |  xml:lang                   |  Content-Language         |
   +-----------------------------+---------------------------+
   |  <priority/>                |  priority for tuple (6)   |
   +-----------------------------+---------------------------+
   |  <show/>                    |  no mapping (7)           |
   +-----------------------------+---------------------------+
   |  <status/>                  |  <note/>                  |
   +-----------------------------+---------------------------+
          ]]></artwork>
        </figure>
        <t>Note the following regarding these mappings:</t>
        <t>
          <list style='numbers'>
            <t>Only an XMPP presence stanza that lacks a 'type' attribute or whose 'type' attribute has a value of "unavailable" SHOULD be mapped by an XMPP-SIP gateway to a SIP NOTIFY request, since those are the only presence stanzas that represent notifications.</t>
            <t>The PIDF schema defines the tuple 'id' attribute as having a datatype of "xs:ID"; because this datatype is more restrictive than the "xs:string" datatype for XMPP resourceparts (in particular, a number is not allowed as the first character of an ID), it is RECOMMENDED to prepend the resourcepart with "ID-" or some other alphabetic string when mapping from XMPP to SIP.</t>
            <t>In practice, often XMPP presence stanzas do not include the 'id' attribute.</t>
            <t>Because the lack of a 'type' attribute indicates that an XMPP entity is available for communications, the gateway SHOULD map that information to a PIDF &lt;basic/&gt; status of "open".  Because a 'type' attribute with a value of "unavailable" indicates that an XMPP entity is not available communications, the gateway SHOULD map that information to a PIDF &lt;basic/&gt; status of "closed".</t>
            <t>When the XMPP-SIP gateway receives XMPP presence of type "unavailable" from the XMPP contact, it SHOULD (1) send a SIP NOTIFY request to the SIP user containing a PIDF document specifying that the XMPP contact now has a basic status of "closed" and (2) send a SIP SUBSCRIBE request to the SIP user with an "Expires" header set to a value of "0" (zero).</t>
            <t>The value of the XMPP &lt;priority/&gt; element is an integer between -128 and +127, whereas the the value of the PIDF &lt;contact/&gt; element's 'priority' attribute is a decimal number from zero to one inclusive, with a maximum of three decimal places.  If the value of the XMPP &lt;priority/&gt; element is negative, an XMPP-SIP gateway MUST NOT map the value.  If an XMPP-SIP gateway maps positive values, it SHOULD treat XMPP priority 0 as PIDF priority 0 and XMPP priority 127 as PIDF priority 1, mapping intermediate values appropriately so that they are unique (e.g., XMPP priority 1 to PIDF priority 0.007, XMPP priority 2 to PIDF priority 0.015, and so on up through mapping XMPP priority 126 to PIDF priority 0.992; note that this is an example only, and that the exact mapping is up to the implementation).</t>
            <t>Some implementations support custom extensions to encapsulate this information; however, there is no need to standardize a PIDF extension for this purpose, since PIDF is already extensible and thus the &lt;show/&gt; element can be included directly, qualified by the 'jabber:client' namespace in the PIDF XML.  The examples in this document illustrate this usage, which is RECOMMENDED.  The most useful values are likely "away" and "dnd", although note that the latter value merely means "busy" and does not imply that a server or client ought to block incoming traffic while the user is in that state.</t>
            <t>Some implementations support custom extensions to encapsulate detailed information about availability; however, there is no need to standardize a PIDF extension for this purpose, since PIDF is already extensible and thus the &lt;show/&gt; element (qualified by the 'jabber:client' namespace) can be included directly in the PIDF XML.  The examples in this document illustrate this usage, which is RECOMMENDED.  The most useful values are likely "away" and "dnd", although note that the latter value merely means "busy" and does not imply that a server or client ought to block incoming traffic while the user is in that state.  Naturally, a gateway can choose to translate a custom extension into an established value of the &lt;show/&gt; element <xref target='RFC6121'/>, or translate a &lt;show/&gt; element into a custom extension that the gateway knows is supported by the user agent of the intended recipient.  Unfortunately, this behavior does not guarantee that information will not be lost; to help prevent information loss, a gateway ought to include both the &lt;show/&gt; element and the custom extension if the gateway cannot suitably translate the custom value into a &lt;show/&gt; value.</t>
          </list>
        </t>
      </section>
      <section title="SIP to XMPP" anchor="pres-sip">
        <t>When Romeo changes his presence, his SIP user agent generates a SIP NOTIFY request for any active subscriptions.  The syntax of the NOTIFY request is defined in <xref target="RFC3856"/>.  The following is an example of such a request:</t>
        <figure>
          <preamble>Example 19: SIP user sends presence notification</preamble>
          <artwork><![CDATA[
|  NOTIFY sip:192.0.2.1 SIP/2.0
|  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=yt66
|  To: <sip:juliet@example.com>;tag=bi54
|  Contact: <sip:romeo@example.net>;gr=orchard
|  Call-ID: C33C6C9D-0F4A-42F9-B95C-7CE86B526B5B
|  Event: presence
|  Subscription-State: active;expires=499
|  Max-Forwards: 70
|  CSeq: 8775 NOTIFY
|  Contact: <sip:simple.example.net;transport=tcp>
|  Content-Type: application/pidf+xml
|  Content-Length: 193
|
|  <?xml version='1.0' encoding='UTF-8'?>
|  <presence xmlns='urn:ietf:params:xml:ns:pidf'
|            entity='pres:romeo@example.net'>
|    <tuple id='ID-orchard'>
|      <status>
|        <basic>closed</basic>
|      </status>
|    </tuple>
|  </presence>
          ]]></artwork>
        </figure>
        <t>Upon receiving the NOTIFY, the SIP server needs to determine the identity of the domain portion of the Request-URI or To header, which it does by following the procedures discussed in <xref target='I-D.ietf-stox-core'/>.  If the domain is an XMPP domain, the SIP server will hand off the NOTIFY to an associated SIP-XMPP gateway or connection manager that natively communicates with XMPP servers.</t>
        <t>The SIP-XMPP gateway is then responsible for translating the NOTIFY into an XMPP presence stanza addressed from the SIP user to the XMPP user:</t>
        <figure>
          <preamble>Example 20: XMPP transformation of SIP presence notification</preamble>
          <artwork><![CDATA[
|  <presence from='romeo@example.net'
|            to='juliet@example.com/balcony'
|            type='unavailable'/>
          ]]></artwork>
        </figure>
        <t>The mapping of SIP syntax elements to XMPP syntax elements SHOULD be as shown in the following table.  (Mappings for elements not mentioned are undefined.)</t>
        <figure>
          <preamble>Table 2: Presence syntax mapping from SIP to XMPP</preamble>
          <artwork><![CDATA[
   +---------------------------+-----------------------------+
   |  SIP Header or PIDF Data  |  XMPP Element or Attribute  |
   +---------------------------+-----------------------------+
   |  basic status             |  type (1)                   |
   +---------------------------+-----------------------------+
   |  Content-Language         |  xml:lang                   |
   +---------------------------+-----------------------------+
   |  CSeq                     |  id (2)                     |
   +---------------------------+-----------------------------+
   |  From                     |  from                       |
   +---------------------------+-----------------------------+
   |  priority for tuple       |  <priority/> (3)            |
   +---------------------------+-----------------------------+
   |  To                       |  to                         |
   +---------------------------+-----------------------------+
   |  <note/>                  |  <status/>                  |
   +---------------------------+-----------------------------+
   |  <show/>                  |  <show/> (4)                |
   +---------------------------+-----------------------------+
          ]]></artwork>
        </figure>
        <t>Note the following regarding these mappings:</t>
        <t><list style='numbers'>
          <t>A PIDF basic status of "open" SHOULD be mapped to no 'type' attribute, and a PIDF basic status of "closed" SHOULD be mapped to a 'type' attribute whose value is "unavailable".</t>
          <t>This mapping is OPTIONAL.</t>
          <t>See the notes following Table 1 of this document regarding mapping of presence priority.</t>
          <t>If a SIP implementation supports the &lt;show/&gt; element (qualified by the 'jabber:client' namespace) as a PIDF extension for availability status as described in the notes following Table 1 of this document, the SIP-XMPP gateway is responsible for including that element in the XMPP presence notification.</t>
        </list></t>
      </section>
    </section>

    <section title="Requests for Presence Information" anchor="req">
      <t>Both SIP and XMPP provide methods for requesting presence information about another entity.</t>
      <section title="XMPP to SIP" anchor="req-xmpp">
        <t>In XMPP, a request for presence information is completed by sending a presence stanza of type "probe":</t>
        <figure>
          <preamble>Example 21: XMPP server sends presence probe on behalf of XMPP user</preamble>
          <artwork><![CDATA[
|  <presence from='juliet@example.com/chamber'
|            to='romeo@example.net'
|            type='probe'/>
          ]]></artwork>
        </figure>
        <t>Note: As described in <xref target='RFC6121'/>, presence probes are used by XMPP servers to request presence on behalf of XMPP users; XMPP clients are discouraged from sending presence probes since retrieving presence is a service that servers provide.</t>
        <t>An XMPP-SIP gateway would transform the presence probe into its SIP equivalent, which is a SUBSCRIBE request with an Expires header value of zero:</t>
        <figure>
          <preamble>Example 22: SIP transformation of XMPP presence probe</preamble>
          <artwork><![CDATA[
|  SUBSCRIBE sip:romeo@example.net SIP/2.0
|  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk
|  From: <sip:juliet@example.com>;tag=ffd2
|  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 123 SUBSCRIBE
|  Contact: <sip:x2s.example.com;transport=tcp>
|  Accept: application/pidf+xml
|  Expires: 0
|  Content-Length: 0
          ]]></artwork>
        </figure>
        <t>As described in <xref target='RFC3856'/>, this cancels any subscription but causes a NOTIFY to be sent to the subscriber, just as a presence probe does (the transformation rules for presence notifications have been previously described in this document).</t>
      </section>
      <section title="SIP to XMPP" anchor="req-sip">
        <t>In SIP, a request for presence information is effectively completed by sending a SUBSCRIBE with an Expires header value of zero:</t>
        <figure>
          <preamble>Example 23: SIP user sends presence request</preamble>
          <artwork><![CDATA[
|  SUBSCRIBE sip:juliet@example.com SIP/2.0
|  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
|  From: <sip:romeo@example.net>;tag=yt66
|  Call-ID: 717B1B84-F080-4F12-9F44-0EC1ADE767B9
|  Event: presence
|  Max-Forwards: 70
|  CSeq: 8775 SUBSCRIBE
|  Contact: <sip:simple.example.net;transport=tcp>
|  Expires: 0
|  Content-Length: 0
          ]]></artwork>
        </figure>
        <t>When honoring the long-lived semantics of an XMPP presence subscription, a presence-aware SIP-XMPP gateway SHOULD translate such a SIP request into a presence stanza of type 'probe' if it does not already have presence information about the subscribee:</t>
        <figure>
          <preamble>Example 24: XMPP transformation of SIP presence request</preamble>
          <artwork><![CDATA[
|  <presence from='romeo@example.net' 
|            to='juliet@example.com' 
|            type='probe'/>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="IANA Considerations" anchor="iana">
      <t>This document makes no requests of IANA.</t>
    </section>

    <section title='Security Considerations' anchor="sec">
      <t>Detailed security considerations for presence protocols are given in <xref target='RFC2779'/>, for SIP-based presence in <xref target="RFC3856"/> (see also <xref target="RFC3261"/>), and for XMPP-based presence in <xref target="RFC6121"/> (see also <xref target="RFC6120"/>).</t>
      <t>The mismatch between long-lived XMPP presence subscriptions and short-lived SIP presence subscriptions introduces the possibility of an amplification attack launched from the XMPP network against a SIP presence server (since each long-lived XMPP presence subscription would typically result in multiple subscription refresh requests on the SIP side of a gateway).  Therefore, access to an XMPP-SIP gateway SHOULD be restricted in various ways; among other things, only an XMPP service that carefully controls account provisioning and provides effective methods for the administrators to control the behavior of registered users ought to host such a gateway (e.g., not a service that offers open account registration) and a gateway ought to be associated only with a single domain or trust realm (e.g., a gateway hosted at simple.example.com ought to allow only users within the example.com domain to access the gateway, not users within example.org, example.net, or any other domain).  If a SIP presence server receives communications through an XMPP-SIP gateway from users who are not associated with a domain that is so related to the hostname of the gateway, it SHOULD (based on local service provisioning) refuse to service such users or refuse to receive traffic from with the gateway.  As a futher check, whenever an XMPP-SIP gateway seeks to refresh an XMPP user's long-lived subscription to a SIP user's presence, it MUST first send an XMPP &lt;presence/&gt; stanza of type "probe" from the address of the gateway to the "bare JID" (user@domain.tld) of the XMPP user, to which the user's XMPP server MUST respond in accordance with <xref target='RFC6121'/>; this puts an equal burden on the XMPP server as on the SIP server.</t>
    </section>

  </middle>

  <back>

    <references title="Normative References">

<reference anchor='I-D.ietf-stox-core'>
<front>
<title>Interworking between the Session Initiation Protocol (SIP) and the Extensible Messaging and Presence Protocol (XMPP): Core</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<author initials='A' surname='Houri' fullname='Avshalom Houri'>
    <organization />
</author>
<author initials='J' surname='Hildebrand' fullname='Joe Hildebrand'>
    <organization />
</author>
<date month='February' day='11' year='2014' />
<abstract><t>As a foundation for the definition of application-specific, bi-directional protocol mappings between the Session Initiation Protocol (SIP) and the Extensible Messaging and Presence Protocol (XMPP), this document specifies the architectural assumptions underlying such mappings as well as the mapping of addresses and error conditions.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-stox-core-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-stox-core-11.txt' />
</reference>

<reference anchor='RFC2119'>
  <front>
    <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
      <organization>Harvard University</organization>
      <address>
        <postal>
          <street>1350 Mass. Ave.</street>
          <street>Cambridge</street>
          <street>MA 02138</street>
        </postal>
        <phone>- +1 617 495 3864</phone>
        <email>-</email>
      </address>
    </author>
    <date month='March' year='1997'></date>
    <area>General</area>
    <keyword>keyword</keyword>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  Authors who follow these guidelines should incorporate this phrase near the beginning of their document:
        <list>
          <t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as described in RFC 2119.</t>
        </list>
      </t>
      <t>Note that the force of these words is modified by the requirement level of the document in which they are used.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14' />
  <seriesInfo name='RFC' value='2119' />
</reference>

<reference anchor='RFC3261'>
<front>
<title>SIP: Session Initiation Protocol</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
<organization /></author>
<author initials='G.' surname='Camarillo' fullname='G. Camarillo'>
<organization /></author>
<author initials='A.' surname='Johnston' fullname='A. Johnston'>
<organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'>
<organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'>
<organization /></author>
<author initials='E.' surname='Schooler' fullname='E. Schooler'>
<organization /></author>
<date month='June' year='2002' /></front>
<seriesInfo name='RFC' value='3261' />
<format type='TXT' octets='647976' target='ftp://ftp.isi.edu/in-notes/rfc3261.txt' />
</reference>

<reference anchor="RFC3856">
<front>
<title>A Presence Event Package for the Session Initiation Protocol (SIP)</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<date year='2004' month='August' /></front>
<seriesInfo name='RFC' value='3856' />
<format type='TXT' octets='62956' target='ftp://ftp.isi.edu/in-notes/rfc3856.txt' />
</reference>

<reference anchor='RFC3863'>
<front>
<title>Presence Information Data Format (PIDF)</title>
<author initials='H.' surname='Sugano' fullname='H. Sugano'>
<organization /></author>
<author initials='S.' surname='Fujimoto' fullname='S. Fujimoto'>
<organization /></author>
<author initials='G.' surname='Klyne' fullname='G. Klyne'>
<organization /></author>
<author initials='A.' surname='Bateman' fullname='A. Bateman'>
<organization /></author>
<author initials='W.' surname='Carr' fullname='W. Carr'>
<organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<date year='2004' month='August' />
<abstract>
<t>This memo specifies the Common Profile for Presence (CPP) Presence Information Data Format (PIDF) as a common presence data format for CPP-compliant Presence protocols, and also defines a new media type "application/pidf+xml" to represent the XML MIME entity for PIDF. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3863' />
<format type='TXT' octets='56956' target='http://www.rfc-editor.org/rfc/rfc3863.txt' />
</reference>

<reference anchor='RFC6120'>
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
<organization /></author>
<date year='2011' month='March' />
<abstract>
<t>The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language (XML) that enables the near-real-time exchange of structured yet extensible data between any two or more network entities.  This document defines XMPP's core protocol methods: setup and teardown of XML streams, channel encryption, authentication, error handling, and communication primitives for messaging, network availability ("presence"), and request-response interactions.  This document obsoletes RFC 3920. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='6120' />
<format type='TXT' octets='451942' target='http://www.rfc-editor.org/rfc/rfc6120.txt' />
</reference>

<reference anchor='RFC6121'>
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
<organization /></author>
<date year='2011' month='March' />
<abstract>
<t>This document defines extensions to core features of the Extensible Messaging and Presence Protocol (XMPP) that provide basic instant messaging (IM) and presence functionality in conformance with the requirements in RFC 2779.  This document obsoletes RFC 3921. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='6121' />
<format type='TXT' octets='244800' target='http://www.rfc-editor.org/rfc/rfc6121.txt' />
</reference>

<reference anchor='RFC6665'>
<front>
<title>SIP-Specific Event Notification</title>
<author initials='A.B.' surname='Roach' fullname='A.B. Roach'>
<organization /></author>
<date year='2012' month='July' />
<abstract>
<t>This document describes an extension to the Session Initiation Protocol (SIP) defined by RFC 3261. The purpose of this extension is to provide an extensible framework by which SIP nodes can request notification from remote nodes indicating that certain events have occurred.&lt;/t>&lt;t> Note that the event notification mechanisms defined herein are NOT intended to be a general-purpose infrastructure for all classes of event subscription and notification.&lt;/t>&lt;t> This document represents a backwards-compatible improvement on the original mechanism described by RFC 3265, taking into account several years of implementation experience. Accordingly, this document obsoletes RFC 3265. This document also updates RFC 4660 slightly to accommodate some small changes to the mechanism that were discussed in that document. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='6665' />
<format type='TXT' octets='125556' target='http://www.rfc-editor.org/rfc/rfc6665.txt' />
</reference>

    </references>

    <references title="Informative References">

<reference anchor="I-D.ietf-simple-cpim-mapping">
<front>
<title>CPIM Mapping of SIMPLE Presence and Instant Messaging</title>
<author initials="J" surname="Rosenberg" fullname="Jonathan  Rosenberg">
    <organization />
</author>
<author initials="B" surname="Campbell" fullname="Ben Campbell">
    <organization />
</author>
<date month="June" day="26" year="2002" />
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-simple-cpim-mapping-01" />
<format type="TXT"
        target="http://www.ietf.org/internet-drafts/draft-ietf-simple-cpim-mapping-01.txt" />
</reference>

<reference anchor='RFC2778'>
<front>
<title>A Model for Presence and Instant Messaging</title>
<author initials='M.' surname='Day' fullname='Mark Day'>
<organization>SightPath, Inc.</organization>
<address>
<postal>
<street>135 Beaver Street</street>
<city>Waltham</city>
<region>MA</region>
<code>02452</code>
<country>US</country></postal>
<email>mday@alum.mit.edu</email></address></author>
<author initials='J.' surname='Rosenberg' fullname='Jonathan Rosenberg'>
<organization>dynamicsoft</organization>
<address>
<postal>
<street>200 Executive Drive</street>
<street>Suite 120</street>
<city>West Orange</city>
<region>NJ</region>
<code>07046</code>
<country>US</country></postal>
<email>jdrosen@dynamicsoft.com</email></address></author>
<author initials='H.' surname='Sugano' fullname='Hiroyasu Sugano'>
<organization>Fujitsu Laboratories Ltd.</organization>
<address>
<postal>
<street>64 Nishiwaki</street>
<street>Ohkubo-cho</street>
<city>Akashi</city>
<region />
<code>674-8555</code>
<country>JP</country></postal>
<email>suga@flab.fujitsu.co.jp</email></address></author>
<date year='2000' month='February' />
<abstract>
<t>This document defines an abstract model for a presence and instant messaging system. It defines the various entities involved, defines terminology, and outlines the services provided by the system. The goal is to provide a common vocabulary for further work on requirements for protocols and markup for presence and instant messaging.</t></abstract></front>
<seriesInfo name='RFC' value='2778' />
<format type='TXT' octets='35153' target='http://www.rfc-editor.org/rfc/rfc2778.txt' />
</reference>

<reference anchor="RFC2779">
<front>
<title abbrev='Instant Messaging/Presence Protocol'>Instant Messaging / Presence Protocol Requirements</title>
<author initials='M.' surname='Day' fullname='Mark Day'>
<organization>SightPath, Inc.</organization>
<address>
<postal>
<street>135 Beaver Street</street>
<city>Waltham</city>
<region>MA</region>
<code>02452</code>
<country>US</country></postal>
<email>mday@alum.mit.edu</email></address></author>
<author initials='S.' surname='Aggarwal' fullname='Sonu Aggarwal'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>sonuag@microsoft.com</email></address></author>
<author initials='J.' surname='Vincent' fullname='Jesse Vincent'>
<organization>Into Networks, Inc.</organization>
<address>
<postal>
<street>150 Cambridgepark Drive</street>
<city>Cambridge</city>
<region>MA</region>
<code>02140</code>
<country>US</country></postal>
<email>jesse@intonet.com</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>Presence and Instant Messaging have recently emerged as a new medium of communications over the Internet.  Presence is a means for finding, retrieving, and subscribing to changes in the presence information (e.g.  "online" or "offline") of other users.  Instant messaging is a means for sending small, simple messages that are delivered immediately to online users.</t>
<t>Applications of presence and instant messaging currently use independent, non-standard and non-interoperable protocols developed by various vendors.  The goal of the Instant Messaging and Presence Protocol (IMPP) Working Group is to define a standard protocol so that independently developed applications of instant messaging and/or   presence can interoperate across the Internet.  This document defines a minimal set of requirements that IMPP must meet.</t></abstract></front>
<seriesInfo name='RFC' value='2779' />
<format type='TXT' octets='47420' target='ftp://ftp.isi.edu/in-notes/rfc2779.txt' />
</reference>

<reference anchor="RFC3860">
<front>
<title>Common Profile for Instant Messaging (CPIM)</title>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<date year='2004' month='August' /></front>
<seriesInfo name='RFC' value='3860' />
<format type='TXT' octets='26486' target='ftp://ftp.isi.edu/in-notes/rfc3860.txt' />
</reference>

<reference anchor="RFC3922">
  <front>
    <title>Mapping the Extensible Messaging and Presence Protocol (XMPP) to Common Presence and Instant Messaging (CPIM)</title>
    <author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
      <organization>Jabber Software Foundation</organization>
    </author>
    <date year='2004' month='October' />
  </front>
  <seriesInfo name='RFC' value='3922' />
  <format type='TXT' octets='70790' target='ftp://ftp.isi.edu/in-notes/rfc3922.txt' />
</reference>

<reference anchor='RFC4480'>
<front>
<title>RPID: Rich Presence Extensions to the Presence Information Data Format (PIDF)</title>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
<organization /></author>
<author initials='V.' surname='Gurbani' fullname='V. Gurbani'>
<organization /></author>
<author initials='P.' surname='Kyzivat' fullname='P. Kyzivat'>
<organization /></author>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<date year='2006' month='July' />
<abstract>
<t>The Presence Information Data Format (PIDF) defines a basic format for representing presence information for a presentity. This format defines a textual note, an indication of availability (open or closed) and a Uniform Resource Identifier (URI) for communication. The Rich Presence Information Data format (RPID) described here is an extension that adds optional elements to the Presence Information Data Format (PIDF). These extensions provide additional information about the presentity and its contacts. The information is designed so that much of it can be derived automatically, e.g., from calendar files or user activity.&lt;/t>&lt;t> This extension includes information about what the person is doing, a grouping identifier for a tuple, when a service or device was last used, the type of place a person is in, what media communications might remain private, the relationship of a service tuple to another presentity, the person's mood, the time zone it is located in, the type of service it offers, an icon reflecting the presentity's status, and the overall role of the presentity.&lt;/t>&lt;t> These extensions include presence information for persons, services (tuples), and devices. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4480' />
<format type='TXT' octets='74026' target='http://www.rfc-editor.org/rfc/rfc4480.txt' />
</reference>

<reference anchor="XEP-0107">
  <front>
    <title>User Mood</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="R." surname="Meijer" fullname="Ralph Meijer">
      <organization/>
      <address>
        <email>ralphm@ik.nu</email>
      </address>
    </author>
    <date day="29" month="October" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0107"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0107.html"/>
</reference>

<reference anchor="XEP-0108">
  <front>
    <title>User Activity</title>
    <author initials="R." surname="Meijer" fullname="Ralph Meijer">
      <organization/>
      <address>
        <email>ralphm@ik.nu</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="29" month="October" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0108"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0108.html"/>
</reference>

    </references>

    <section title="Acknowledgements" anchor="ack">
      <t>The authors wish to thank the following individuals for their feedback: Chris Christou, Fabio Forno, Adrian Georgescu, Philipp Hancke, Saul Ibarra Corretge, Markus Isomaki, Olle Johansson, Paul Kyzivat, Salvatore Loreto, Michael Lundberg, Daniel-Constantin Mierla, and Tory Patnoe.</t>
      <t>Dave Crocker provided helpful and detailed feedback on behalf of the Applications Area Directorate.</t>
      <t>Ben Laurie performed a review on behalf of the Security Directorate, resulting in improvements to the security considerations.</t>
      <t>During IESG review, Pete Resnick caught several oversights in the document with regard to interoperability.</t>
      <t>The authors gratefully acknowledge the assistance of Markus Isomaki and Yana Stamcheva as the working group chairs and Gonzalo Camarillo as the sponsoring Area Director.</t>
      <t>Some text in this document was borrowed from <xref target='RFC3922'/>.</t>
      <t>Peter Saint-Andre wishes to acknowledge Cisco Systems, Inc., for employing him during his work on earlier versions of this document.</t>
    </section>

  </back>

</rfc>
